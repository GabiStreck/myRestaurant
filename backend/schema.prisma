// schema.prisma
generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int           @id @default(autoincrement())
    email       String        @unique
    name        String
    imageUrl    String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Reservation Reservation[]
}

model Table {
    id          Int           @id @default(autoincrement())
    number      Int
    capacity    Int
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Reservation Reservation[]
}

model Menu {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    dishes    Dish[]
    drinks    Drink[]
}

model Dish {
    id           Int           @id @default(autoincrement())
    name         String
    imageUrl     String?
    price        Float
    menu         Menu          @relation(fields: [menuId], references: [id])
    menuId       Int
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    reservations Reservation[] @relation("DishReservations") // Cambiamos el nombre de la relación
}

model Drink {
    id           Int           @id @default(autoincrement())
    name         String
    imageUrl     String?
    price        Float
    menu         Menu          @relation(fields: [menuId], references: [id])
    menuId       Int
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    reservations Reservation[] @relation("DrinkReservations") // Cambiamos el nombre de la relación
}

model Reservation {
    id        Int      @id @default(autoincrement())
    date      DateTime
    mealType  String
    table     Table    @relation(fields: [tableId], references: [id])
    tableId   Int
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    dishes    Dish[]   @relation("DishReservations") // Cambiamos el nombre de la relación
    drinks    Drink[]  @relation("DrinkReservations") // Añadimos una nueva relación para Drink
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
