// schema.prisma
generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int           @id @default(autoincrement())
    email       String        @unique
    name        String
    imageUrl    String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Reservation Reservation[]
    Order       Order[]
}

model Table {
    id          Int           @id @default(autoincrement())
    number      Int
    capacity    Int
    indoor      Boolean
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Reservation Reservation[]
    Order       Order[]
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String
    imageUrl    String?
    price       Float
    description String
    rating      Float
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    category    Category @relation(fields: [categoryId], references: [id])
    categoryId  Int
    Menu        Menu[]
    Order       Order?   @relation(fields: [orderId], references: [id])
    orderId     Int?
    Dish        Dish?
    Drink       Drink?
}

model Dish {
    id          Int      @id @default(autoincrement())
    cookingTime Int
    allergens   String[]
    ingredients String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    product     Product  @relation(fields: [productId], references: [id])
    productId   Int      @unique
}

model Drink {
    id        Int      @id @default(autoincrement())
    volume    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    product   Product  @relation(fields: [productId], references: [id])
    productId Int      @unique
}

model Category {
    id        Int       @id @default(autoincrement())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Product   Product[]
}

model Menu {
    id        Int       @id @default(autoincrement())
    name      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    products  Product[]
}

model Reservation {
    id        Int      @id @default(autoincrement())
    date      DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    table     Table    @relation(fields: [tableId], references: [id])
    tableId   Int
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
}

model Order {
    id        Int       @id @default(autoincrement())
    isPaid    Boolean
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    table     Table?    @relation(fields: [tableId], references: [id])
    tableId   Int?
    user      User      @relation(fields: [userId], references: [id])
    userId    Int
    products  Product[]
}
